<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Flash\Demo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Flash\Demo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Fri Dec 28 18:06:50 2018
<BR><P>
<H3>Maximum Stack Usage =        488 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
taskWelink &rArr; WelinkMain &rArr; MsaLogin &rArr; RecvDataHandle &rArr; DownstreamCmdHandle &rArr; cmd_105_proess &rArr; UpstreamCmdHandle &rArr; HardwareSendData &rArr; WriteSocketDataToBuffer &rArr; ReadSocket_2Byte &rArr; EthernetSendByte
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[b3]">OS_ENTER_CRITICAL</a>
 <LI><a href="#[b4]">OS_EXIT_CRITICAL</a>
 <LI><a href="#[d1]">OSStartHighRdy</a>
 <LI><a href="#[e3]">OSCtxSw</a>
 <LI><a href="#[c5]">OSIntCtxSw</a>
 <LI><a href="#[8]">OSPendSV</a>
 <LI><a href="#[13a]">intDisAll</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[20]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">ADC_IRQHandler</a><BR>
 <LI><a href="#[ee]">PrintHEX</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ee]">PrintHEX</a><BR>
 <LI><a href="#[ea]">PrintDEC</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ea]">PrintDEC</a><BR>
 <LI><a href="#[ed]">PrintBIN</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ed]">PrintBIN</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[20]">ADC_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[21]">BOD_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2c]">CANActivity_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[23]">CAN_IRQHandler</a> from can.o(i.CAN_IRQHandler) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[24]">DMA_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[32]">EEPROM_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1c]">EINT0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1d]">EINT1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1e]">EINT2_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1f]">EINT3_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[26]">ENET_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[30]">GPIO_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[14]">I2C0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[15]">I2C1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[16]">I2C2_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[25]">I2S_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2f]">LCD_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[27]">MCI_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[28]">MCPWM_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[8]">OSPendSV</a> from os_cpu_a.o(UCOSII_ASM) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[36]">OSTaskSwHook</a> from os_cpu_c.o(i.OSTaskSwHook) referenced from os_cpu_a.o(UCOSII_ASM)
 <LI><a href="#[37]">OSTmr_Task</a> from os_tmr.o(i.OSTmr_Task) referenced from os_tmr.o(i.OSTmr_InitTask)
 <LI><a href="#[38]">OS_TaskIdle</a> from os_core.o(i.OS_TaskIdle) referenced from os_core.o(i.OS_InitTaskIdle)
 <LI><a href="#[39]">OS_TaskStat</a> from os_core.o(i.OS_TaskStat) referenced from os_core.o(i.OS_InitTaskStat)
 <LI><a href="#[1a]">PLL0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2a]">PLL1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[31]">PWM0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[13]">PWM1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[29]">QEI_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[1b]">RTC_IRQHandler</a> from rtc.o(i.RTC_IRQHandler) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[17]">SPIFI_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[18]">SSP0_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[19]">SSP1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2e]">SSP2_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[34]">SystemInit</a> from system_lpc177x_8x.o(i.SystemInit) referenced from startup_lpc177x_8x.o(.text)
 <LI><a href="#[b]">TIMER0_IRQHandler</a> from timer.o(i.TIMER0_IRQHandler) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[c]">TIMER1_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[d]">TIMER2_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[e]">TIMER3_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[f]">UART0_IRQHandler</a> from uart.o(i.UART0_IRQHandler) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[10]">UART1_IRQHandler</a> from uart.o(i.UART1_IRQHandler) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[11]">UART2_IRQHandler</a> from uart.o(i.UART2_IRQHandler) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[12]">UART3_IRQHandler</a> from uart.o(i.UART3_IRQHandler) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2d]">UART4_IRQHandler</a> from uart.o(i.UART4_IRQHandler) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[2b]">USBActivity_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[22]">USB_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[a]">WDT_IRQHandler</a> from startup_lpc177x_8x.o(.text) referenced from startup_lpc177x_8x.o(RESET)
 <LI><a href="#[35]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_lpc177x_8x.o(.text)
 <LI><a href="#[33]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[3d]">taskBMS</a> from main.o(i.taskBMS) referenced from main.o(i.taskStart)
 <LI><a href="#[3b]">taskDisplay</a> from main.o(i.taskDisplay) referenced from main.o(i.taskStart)
 <LI><a href="#[3c]">taskMeter</a> from main.o(i.taskMeter) referenced from main.o(i.taskStart)
 <LI><a href="#[3a]">taskStart</a> from main.o(i.taskStart) referenced from main.o(i.main)
 <LI><a href="#[3e]">taskWelink</a> from main.o(i.taskWelink) referenced from main.o(i.taskStart)
 <LI><a href="#[9]">tickISRHandler</a> from os_cpu_c.o(i.tickISRHandler) referenced from startup_lpc177x_8x.o(RESET)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[35]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(.text)
</UL>
<P><STRONG><a name="[126]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[3f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[127]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[128]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[129]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[12a]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[12b]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>CANActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EEPROM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>GPIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>MCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SPIFI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SSP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>USBActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[11b]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_106_upload
</UL>

<P><STRONG><a name="[12c]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataProcess
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwin_ChangeVariableValue_FrameN
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayText
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpstreamCmdHandle
</UL>

<P><STRONG><a name="[12d]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterMain
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[12f]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoopBack
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4RxbufClear
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2RxbufClear
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1RxbufClear
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataProcess
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3RxbufClear
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0RxbufClear
</UL>

<P><STRONG><a name="[131]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[132]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[44]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[49]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[4a]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFLT
</UL>

<P><STRONG><a name="[4b]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFLT
</UL>

<P><STRONG><a name="[77]"></a>CCS_Analyse</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bms.o(i.CCS_Analyse))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charger_RECData_Pro
</UL>

<P><STRONG><a name="[133]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>CTS_Analyse</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bms.o(i.CTS_Analyse))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charger_RECData_Pro
</UL>

<P><STRONG><a name="[c1]"></a>OSInitHookEnd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookEnd))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[e4]"></a>OSTCBInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTCBInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[4c]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFLT
</UL>

<P><STRONG><a name="[4d]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFLT
</UL>

<P><STRONG><a name="[45]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[134]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[135]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[136]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[47]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[40]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[137]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>OS_ENTER_CRITICAL</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(UCOSII_ASM))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickISRHandler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[b4]"></a>OS_EXIT_CRITICAL</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(UCOSII_ASM))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickISRHandler
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[d1]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(UCOSII_ASM))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[e3]"></a>OSCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(UCOSII_ASM))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[c5]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(UCOSII_ASM))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[8]"></a>OSPendSV</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(UCOSII_ASM))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[13a]"></a>intDisAll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(UCOSII_ASM), UNUSED)

<P><STRONG><a name="[f0]"></a>ASCII_To_HEX</STRONG> (Thumb, 248 bytes, Stack size 28 bytes, calculator.o(i.ASCII_To_HEX))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ASCII_To_HEX
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataProcess
</UL>

<P><STRONG><a name="[f1]"></a>AscToHexStr</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, calculator.o(i.AscToHexStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AscToHexStr
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataProcess
</UL>

<P><STRONG><a name="[b1]"></a>BCD_To_HEX</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, calculator.o(i.BCD_To_HEX))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BCD_To_HEX
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBCD_To_HEX_L
</UL>

<P><STRONG><a name="[50]"></a>BMSMain</STRONG> (Thumb, 480 bytes, Stack size 8 bytes, bms.o(i.BMSMain))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = BMSMain &rArr; Charger_RECData_Pro &rArr; CST_Analyse &rArr; BMS_BSD &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BST
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BSM
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BCS
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BCL
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charger_RECData_Pro
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskBMS
</UL>

<P><STRONG><a name="[6a]"></a>BMS_DATA_Packet_Analyse</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, bms.o(i.BMS_DATA_Packet_Analyse))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = BMS_DATA_Packet_Analyse &rArr; BMS_BRM_Msg06 &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BRM_Msg07
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BRM_Msg06
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BRM_Msg05
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BRM_Msg04
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BRM_Msg03
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BRM_Msg02
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BRM_Msg01
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BCS_Data_02
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BCS_Data_01
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BCP_DATA_02
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BCP_DATA_01
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charger_RECData_Pro
</UL>

<P><STRONG><a name="[6b]"></a>CANRCV</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, can.o(i.CANRCV))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CANRCV
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_IRQHandler
</UL>

<P><STRONG><a name="[119]"></a>CANSend</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, can.o(i.CANSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CANSend
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCAN0
</UL>

<P><STRONG><a name="[23]"></a>CAN_IRQHandler</STRONG> (Thumb, 142 bytes, Stack size 20 bytes, can.o(i.CAN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CAN_IRQHandler &rArr; CANRCV
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRCV
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>CAN_Init</STRONG> (Thumb, 286 bytes, Stack size 20 bytes, can.o(i.CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CAN_Init &rArr; Quit_SWRst
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quit_SWRst
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enter_SWRst
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6f]"></a>CEM_Analyse</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bms.o(i.CEM_Analyse))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = CEM_Analyse &rArr; BMS_BEM &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BEM
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charger_RECData_Pro
</UL>

<P><STRONG><a name="[70]"></a>CHM_Analyse</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bms.o(i.CHM_Analyse))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CHM_Analyse &rArr; BMS_BHM &rArr; WriteCAN0 &rArr; CANSend
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BHM
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charger_RECData_Pro
</UL>

<P><STRONG><a name="[125]"></a>CLKPWR_GetCLK</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lpc177x_8x_clkpwr.o(i.CLKPWR_GetCLK))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_init
</UL>

<P><STRONG><a name="[71]"></a>CML_Analyse</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bms.o(i.CML_Analyse))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = CML_Analyse &rArr; BMS_BRO &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BRO
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charger_RECData_Pro
</UL>

<P><STRONG><a name="[72]"></a>CRM_Analyse</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bms.o(i.CRM_Analyse))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CRM_Analyse &rArr; BMS_BRM &rArr; WriteCAN0 &rArr; CANSend
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BRM
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BCP
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charger_RECData_Pro
</UL>

<P><STRONG><a name="[73]"></a>CRO_Analyse</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, bms.o(i.CRO_Analyse))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = CRO_Analyse &rArr; BMS_BRO &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BRO
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BCS
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BCL
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charger_RECData_Pro
</UL>

<P><STRONG><a name="[74]"></a>CSD_Analyse</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bms.o(i.CSD_Analyse))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = CSD_Analyse &rArr; BMS_BSD &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BSD
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BEM
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charger_RECData_Pro
</UL>

<P><STRONG><a name="[75]"></a>CST_Analyse</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, bms.o(i.CST_Analyse))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = CST_Analyse &rArr; BMS_BSD &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BST
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BSD
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Charger_RECData_Pro
</UL>

<P><STRONG><a name="[78]"></a>DetectGateway</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, ethernet.o(i.DetectGateway))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = DetectGateway &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSocket_4Byte
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSocket_1Byte
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSocket_1Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Initialization
</UL>

<P><STRONG><a name="[7c]"></a>DisplayMain</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, display.o(i.DisplayMain))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = DisplayMain &rArr; DisplayVariableValue &rArr; DisplayText &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataProcess
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayVariableValue
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskDisplay
</UL>

<P><STRONG><a name="[85]"></a>DownstreamCmdHandle</STRONG> (Thumb, 396 bytes, Stack size 32 bytes, welink.o(i.DownstreamCmdHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = DownstreamCmdHandle &rArr; cmd_105_proess &rArr; UpstreamCmdHandle &rArr; HardwareSendData &rArr; WriteSocketDataToBuffer &rArr; ReadSocket_2Byte &rArr; EthernetSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_107_proess
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_105_proess
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_103_proess
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_101_proess
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_9_proess
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_7_proess
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_5_proess
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_3_proess
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_205_proess
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_203_proess
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_201_proess
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_1_proess
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_109_proess
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvDataHandle
</UL>

<P><STRONG><a name="[95]"></a>ENETconnect</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, welink.o(i.ENETconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = ENETconnect &rArr; W5500SocketRXD &rArr; LoopBack &rArr; Print &rArr; PrintFLT &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Initialization
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500SocketRXD
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReConnectMSA
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WelinkMain
</UL>

<P><STRONG><a name="[6d]"></a>Enter_SWRst</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, can.o(i.Enter_SWRst))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Enter_SWRst
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[99]"></a>EthernetReadByte</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ethernet.o(i.EthernetReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EthernetReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP2_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSocket_2Byte
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSocket_1Byte
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSocketDataToBuffer
</UL>

<P><STRONG><a name="[9b]"></a>EthernetSendByte</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ethernet.o(i.EthernetSendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EthernetSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP2_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSocket_4Byte
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSocket_2Byte
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSocket_1Byte
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSocketDataToBuffer
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSocket_2Byte
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSocket_1Byte
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSocketDataToBuffer
</UL>

<P><STRONG><a name="[122]"></a>ExRTCSet</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtc.o(i.ExRTCSet))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9e]"></a>Fdelay</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fram.o(i.Fdelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Fdelay
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramRead
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramState
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramWrite
</UL>

<P><STRONG><a name="[9d]"></a>FramRead</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, fram.o(i.FramRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FramRead &rArr; Fdelay
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_SendData
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_ReadData
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fdelay
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParameterInit
</UL>

<P><STRONG><a name="[a1]"></a>FramState</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, fram.o(i.FramState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FramState &rArr; Fdelay
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_SendData
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_ReadData
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fdelay
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramWrite
</UL>

<P><STRONG><a name="[a2]"></a>FramWrite</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, fram.o(i.FramWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FramWrite &rArr; FramState &rArr; Fdelay
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_SendData
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramState
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fdelay
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysLinkParaInit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataProcess
</UL>

<P><STRONG><a name="[11e]"></a>GPIOInit</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, gpio.o(i.GPIOInit))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11a]"></a>HEX_To_BCD</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, calculator.o(i.HEX_To_BCD))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_106_upload
</UL>

<P><STRONG><a name="[a3]"></a>HardwareSendData</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, welink.o(i.HardwareSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = HardwareSendData &rArr; WriteSocketDataToBuffer &rArr; ReadSocket_2Byte &rArr; EthernetSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSocketDataToBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpstreamCmdHandle
</UL>

<P><STRONG><a name="[83]"></a>HexToAscStr</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, calculator.o(i.HexToAscStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HexToAscStr
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayVariableValue
</UL>

<P><STRONG><a name="[a5]"></a>LoopBack</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ethernet.o(i.LoopBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LoopBack &rArr; Print &rArr; PrintFLT &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSocketDataToBuffer
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500SocketRXD
</UL>

<P><STRONG><a name="[a8]"></a>MeterMain</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, meter.o(i.MeterMain))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = MeterMain &rArr; Print &rArr; PrintFLT &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2SendStr
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2RxbufClear
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NBCD_To_HEX_L
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramePack_645_2007
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FrameCheck_645_2007
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMeter
</UL>

<P><STRONG><a name="[ae]"></a>MsaLogin</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, welink.o(i.MsaLogin))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = MsaLogin &rArr; RecvDataHandle &rArr; DownstreamCmdHandle &rArr; cmd_105_proess &rArr; UpstreamCmdHandle &rArr; HardwareSendData &rArr; WriteSocketDataToBuffer &rArr; ReadSocket_2Byte &rArr; EthernetSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvDataHandle
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReConnectMSA
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpstreamCmdHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WelinkMain
</UL>

<P><STRONG><a name="[ac]"></a>NBCD_To_HEX_L</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, calculator.o(i.NBCD_To_HEX_L))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = NBCD_To_HEX_L &rArr; BCD_To_HEX
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BCD_To_HEX
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterMain
</UL>

<P><STRONG><a name="[f4]"></a>Ndelay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ethernet.o(i.Ndelay))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSocket_4Byte
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSocket_2Byte
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSocket_1Byte
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSocketDataToBuffer
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSocket_2Byte
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSocket_1Byte
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSocketDataToBuffer
</UL>

<P><STRONG><a name="[c2]"></a>OSDebugInit</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, os_dbg_r.o(i.OSDebugInit))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[b2]"></a>OSEventNameSet</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, os_core.o(i.OSEventNameSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSEventNameSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[b5]"></a>OSInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, os_core.o(i.OSInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OSTmr_Init &rArr; OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSDebugInit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitRdyList
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitMisc
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookEnd
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookBegin
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>OSInitHookBegin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookBegin))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[c3]"></a>OSIntExit</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, os_core.o(i.OSIntExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickISRHandler
</UL>

<P><STRONG><a name="[c6]"></a>OSSchedLock</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, os_core.o(i.OSSchedLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSSchedLock
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[c7]"></a>OSSchedUnlock</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, os_core.o(i.OSSchedUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[c9]"></a>OSSemCreate</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, os_sem.o(i.OSSemCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[cb]"></a>OSSemPend</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, os_sem.o(i.OSSemPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[ce]"></a>OSSemPost</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, os_sem.o(i.OSSemPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrSignal
</UL>

<P><STRONG><a name="[d0]"></a>OSStart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, os_core.o(i.OSStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSStart
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d2]"></a>OSStatInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, os_core.o(i.OSStatInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSStatInit &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskStart
</UL>

<P><STRONG><a name="[d3]"></a>OSTaskCreate</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, os_task.o(i.OSTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskStart
</UL>

<P><STRONG><a name="[d6]"></a>OSTaskCreateExt</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, os_task.o(i.OSTaskCreateExt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStkClr
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_InitTask
</UL>

<P><STRONG><a name="[e5]"></a>OSTaskCreateHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskCreateHook))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[e6]"></a>OSTaskIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskIdleHook))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
</UL>

<P><STRONG><a name="[d8]"></a>OSTaskNameSet</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, os_task.o(i.OSTaskNameSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTaskNameSet
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskStat
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_InitTask
</UL>

<P><STRONG><a name="[e7]"></a>OSTaskStatHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskStatHook))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[d9]"></a>OSTaskStkChk</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, os_task.o(i.OSTaskStkChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>

<P><STRONG><a name="[d4]"></a>OSTaskStkInit</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, os_cpu_c.o(i.OSTaskStkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[da]"></a>OSTaskSuspend</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, os_task.o(i.OSTaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskSuspend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskStart
</UL>

<P><STRONG><a name="[36]"></a>OSTaskSwHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskSwHook))
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(UCOSII_ASM)
</UL>
<P><STRONG><a name="[63]"></a>OSTimeDly</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, os_time.o(i.OSTimeDly))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BRM_Msg03
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500SocketRXD
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketConnect
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectGateway
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataProcess
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsaLogin
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSendData
</UL>

<P><STRONG><a name="[59]"></a>OSTimeDlyHMSM</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, os_time.o(i.OSTimeDlyHMSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BSD
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BRO
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BRM_Msg06
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BRM_Msg05
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BRM_Msg04
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BRM_Msg03
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BRM_Msg02
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BRM_Msg01
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BEM
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BCS_Data_01
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BCP_DATA_01
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WelinkMain
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterMain
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskMeter
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskDisplay
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskBMS
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2SendStr
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwin_ChangeVariableValue_FrameN
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwin_ChangeVariableValue_Frame1
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayText
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataHandle
</UL>

<P><STRONG><a name="[db]"></a>OSTimeTick</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, os_core.o(i.OSTimeTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OSTimeTick &rArr; OSTimeTickHook &rArr; OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tickISRHandler
</UL>

<P><STRONG><a name="[dc]"></a>OSTimeTickHook</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTimeTickHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = OSTimeTickHook &rArr; OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrSignal
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[dd]"></a>OSTmrSignal</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, os_tmr.o(i.OSTmrSignal))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>

<P><STRONG><a name="[c0]"></a>OSTmr_Init</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, os_tmr.o(i.OSTmr_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = OSTmr_Init &rArr; OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_InitTask
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[cf]"></a>OS_EventTaskRdy</STRONG> (Thumb, 128 bytes, Stack size 36 bytes, os_core.o(i.OS_EventTaskRdy))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemoveMulti
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>

<P><STRONG><a name="[cd]"></a>OS_EventTaskRemove</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, os_core.o(i.OS_EventTaskRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>

<P><STRONG><a name="[e2]"></a>OS_EventTaskRemoveMulti</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, os_core.o(i.OS_EventTaskRemoveMulti))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_EventTaskRemoveMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>

<P><STRONG><a name="[cc]"></a>OS_EventTaskWait</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, os_core.o(i.OS_EventTaskWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskWait
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>

<P><STRONG><a name="[ca]"></a>OS_EventWaitListInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(i.OS_EventWaitListInit))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>

<P><STRONG><a name="[bb]"></a>OS_FlagInit</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, os_flag.o(i.OS_FlagInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_FlagInit
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[de]"></a>OS_MemClr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_core.o(i.OS_MemClr))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[bc]"></a>OS_MemInit</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, os_mem.o(i.OS_MemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_MemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[bd]"></a>OS_QInit</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, os_q.o(i.OS_QInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_QInit
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[c8]"></a>OS_Sched</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, os_core.o(i.OS_Sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[d5]"></a>OS_TCBInit</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, os_core.o(i.OS_TCBInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[38]"></a>OS_TaskIdle</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(i.OS_TaskIdle))
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.OS_InitTaskIdle)
</UL>
<P><STRONG><a name="[39]"></a>OS_TaskStat</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, os_core.o(i.OS_TaskStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TaskStat &rArr; OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.OS_InitTaskStat)
</UL>
<P><STRONG><a name="[e8]"></a>OS_TaskStatStkChk</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, os_core.o(i.OS_TaskStatStkChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[d7]"></a>OS_TaskStkClr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_task.o(i.OS_TaskStkClr))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[a7]"></a>Print</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, print.o(i.Print))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Print &rArr; PrintFLT &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSTR
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintHEX
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFLT
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDEC
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCH
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintBIN
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterMain
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoopBack
</UL>

<P><STRONG><a name="[ed]"></a>PrintBIN</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, print.o(i.PrintBIN))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = PrintBIN &rArr;  PrintBIN (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSTR
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCH
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintBIN
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintBIN
</UL>

<P><STRONG><a name="[e9]"></a>PrintCH</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, print.o(i.PrintCH))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PrintCH
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSTR
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintHEX
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFLT
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDEC
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintBIN
</UL>

<P><STRONG><a name="[ea]"></a>PrintDEC</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, print.o(i.PrintDEC))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = PrintDEC &rArr;  PrintDEC (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDEC
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCH
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFLT
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDEC
</UL>

<P><STRONG><a name="[eb]"></a>PrintFLT</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, print.o(i.PrintFLT))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = PrintFLT &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintDEC
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCH
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print
</UL>

<P><STRONG><a name="[ee]"></a>PrintHEX</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, print.o(i.PrintHEX))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = PrintHEX &rArr;  PrintHEX (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintSTR
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintHEX
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCH
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintHEX
</UL>

<P><STRONG><a name="[ec]"></a>PrintSTR</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, print.o(i.PrintSTR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PrintSTR &rArr; PrintCH
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCH
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintHEX
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintBIN
</UL>

<P><STRONG><a name="[6e]"></a>Quit_SWRst</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, can.o(i.Quit_SWRst))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Quit_SWRst
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>

<P><STRONG><a name="[123]"></a>RTCInit</STRONG> (Thumb, 190 bytes, Stack size 12 bytes, rtc.o(i.RTCInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RTCInit
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b]"></a>RTC_IRQHandler</STRONG> (Thumb, 290 bytes, Stack size 0 bytes, rtc.o(i.RTC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>ReConnectMSA</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, welink.o(i.ReConnectMSA))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsaLogin
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENETconnect
</UL>

<P><STRONG><a name="[a6]"></a>ReadSocketDataToBuffer</STRONG> (Thumb, 304 bytes, Stack size 32 bytes, ethernet.o(i.ReadSocketDataToBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ReadSocketDataToBuffer &rArr; ReadSocket_2Byte &rArr; EthernetSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSocket_2Byte
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSocket_1Byte
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSocket_2Byte
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ndelay
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetSendByte
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoopBack
</UL>

<P><STRONG><a name="[7b]"></a>ReadSocket_1Byte</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ethernet.o(i.ReadSocket_1Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ReadSocket_1Byte &rArr; EthernetSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ndelay
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetSendByte
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500SocketRXD
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketConnect
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IR
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectGateway
</UL>

<P><STRONG><a name="[f3]"></a>ReadSocket_2Byte</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, ethernet.o(i.ReadSocket_2Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ReadSocket_2Byte &rArr; EthernetSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ndelay
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetSendByte
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSocketDataToBuffer
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSocketDataToBuffer
</UL>

<P><STRONG><a name="[f6]"></a>Read_IR</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ethernet.o(i.Read_IR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Read_IR &rArr; WriteSocket_1Byte &rArr; EthernetSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSocket_1Byte
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSocket_1Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500SocketRXD
</UL>

<P><STRONG><a name="[f7]"></a>Read_W5500</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, ethernet.o(i.Read_W5500))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Read_W5500 &rArr; EthernetSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ndelay
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetSendByte
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500SocketRXD
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500Init
</UL>

<P><STRONG><a name="[b0]"></a>RecvDataHandle</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, welink.o(i.RecvDataHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = RecvDataHandle &rArr; DownstreamCmdHandle &rArr; cmd_105_proess &rArr; UpstreamCmdHandle &rArr; HardwareSendData &rArr; WriteSocketDataToBuffer &rArr; ReadSocket_2Byte &rArr; EthernetSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500SocketRXD
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownstreamCmdHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WelinkMain
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsaLogin
</UL>

<P><STRONG><a name="[11f]"></a>SSP0_Init</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, ssp.o(i.SSP0_Init))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>SSP0_ReadData</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, ssp.o(i.SSP0_ReadData))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramRead
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramState
</UL>

<P><STRONG><a name="[9f]"></a>SSP0_SendData</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ssp.o(i.SSP0_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramRead
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramState
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramWrite
</UL>

<P><STRONG><a name="[120]"></a>SSP2_Init</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, ssp.o(i.SSP2_Init))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9a]"></a>SSP2_ReadData</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, ssp.o(i.SSP2_ReadData))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetReadByte
</UL>

<P><STRONG><a name="[9c]"></a>SSP2_SendData</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ssp.o(i.SSP2_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetSendByte
</UL>

<P><STRONG><a name="[f8]"></a>SendDataHandle</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, welink.o(i.SendDataHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = SendDataHandle &rArr; UpstreamCmdHandle &rArr; HardwareSendData &rArr; WriteSocketDataToBuffer &rArr; ReadSocket_2Byte &rArr; EthernetSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpstreamCmdHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WelinkMain
</UL>

<P><STRONG><a name="[f9]"></a>SocketConnect</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ethernet.o(i.SocketConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = SocketConnect &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSocket_1Byte
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSocket_1Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500SocketRXD
</UL>

<P><STRONG><a name="[fa]"></a>Socketn_Config</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ethernet.o(i.Socketn_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Socketn_Config &rArr; WriteSocket_4Byte &rArr; EthernetSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSocket_4Byte
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSocket_2Byte
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSocket_1Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500SocketRXD
</UL>

<P><STRONG><a name="[fb]"></a>SysLinkParaInit</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, ethernet.o(i.SysLinkParaInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SysLinkParaInit &rArr; FramWrite &rArr; FramState &rArr; Fdelay
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500LoadParameters
</UL>

<P><STRONG><a name="[34]"></a>SystemInit</STRONG> (Thumb, 188 bytes, Stack size 0 bytes, system_lpc177x_8x.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(.text)
</UL>
<P><STRONG><a name="[b]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, timer.o(i.TIMER0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[121]"></a>Timer0Init</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, timer.o(i.Timer0Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer0Init
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fd]"></a>UART0Init</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, uart.o(i.UART0Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ff]"></a>UART0RxbufClear</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, uart.o(i.UART0RxbufClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0RxbufClear
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[ef]"></a>UART0SendByte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(i.UART0SendByte))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintCH
</UL>

<P><STRONG><a name="[f]"></a>UART0_IRQHandler</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, uart.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART0_IRQHandler &rArr; UART0RxbufClear
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0RxbufClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[100]"></a>UART1Init</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, uart.o(i.UART1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f2]"></a>UART1RxbufClear</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, uart.o(i.UART1RxbufClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1RxbufClear
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDataProcess
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[101]"></a>UART1SendByte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(i.UART1SendByte))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1SendStr
</UL>

<P><STRONG><a name="[81]"></a>UART1SendStr</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, uart.o(i.UART1SendStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART1SendStr
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwin_ChangeVariableValue_FrameN
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwin_ChangeVariableValue_Frame1
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayText
</UL>

<P><STRONG><a name="[10]"></a>UART1_IRQHandler</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, uart.o(i.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART1_IRQHandler &rArr; UART1RxbufClear
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1RxbufClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[102]"></a>UART2Init</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, uart.o(i.UART2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART2Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ad]"></a>UART2RxbufClear</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, uart.o(i.UART2RxbufClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART2RxbufClear
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterMain
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
</UL>

<P><STRONG><a name="[103]"></a>UART2SendByte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(i.UART2SendByte))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2SendStr
</UL>

<P><STRONG><a name="[aa]"></a>UART2SendStr</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, uart.o(i.UART2SendStr))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = UART2SendStr &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterMain
</UL>

<P><STRONG><a name="[11]"></a>UART2_IRQHandler</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, uart.o(i.UART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART2_IRQHandler &rArr; UART2RxbufClear
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2RxbufClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[104]"></a>UART3Init</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, uart.o(i.UART3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART3Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[105]"></a>UART3RxbufClear</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, uart.o(i.UART3RxbufClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART3RxbufClear
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3_IRQHandler
</UL>

<P><STRONG><a name="[12]"></a>UART3_IRQHandler</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, uart.o(i.UART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART3_IRQHandler &rArr; UART3RxbufClear
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3RxbufClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[106]"></a>UART4Init</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, uart.o(i.UART4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART4Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[107]"></a>UART4RxbufClear</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, uart.o(i.UART4RxbufClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART4RxbufClear
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[2d]"></a>UART4_IRQHandler</STRONG> (Thumb, 304 bytes, Stack size 16 bytes, uart.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART4_IRQHandler &rArr; UART4RxbufClear
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4RxbufClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>UpstreamCmdHandle</STRONG> (Thumb, 440 bytes, Stack size 320 bytes, welink.o(i.UpstreamCmdHandle))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = UpstreamCmdHandle &rArr; HardwareSendData &rArr; WriteSocketDataToBuffer &rArr; ReadSocket_2Byte &rArr; EthernetSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_108_upload
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_106_upload
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_104_upload
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_102_upload
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_08_upload
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_06_upload
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_04_upload
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_02_upload
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSendData
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_206_upload
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_204_upload
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_202_upload
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_110_upload
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_10_upload
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_105_proess
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_103_proess
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataHandle
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsaLogin
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_3_proess
</UL>

<P><STRONG><a name="[115]"></a>W5500Init</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, ethernet.o(i.W5500Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = W5500Init &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_W5500
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Initialization
</UL>

<P><STRONG><a name="[117]"></a>W5500LoadParameters</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, ethernet.o(i.W5500LoadParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = W5500LoadParameters &rArr; SysLinkParaInit &rArr; FramWrite &rArr; FramState &rArr; Fdelay
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysLinkParaInit
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500_Initialization
</UL>

<P><STRONG><a name="[98]"></a>W5500SocketRXD</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, ethernet.o(i.W5500SocketRXD))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = W5500SocketRXD &rArr; LoopBack &rArr; Print &rArr; PrintFLT &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSocket_1Byte
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socketn_Config
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketConnect
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_W5500
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IR
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSocket_1Byte
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoopBack
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvDataHandle
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENETconnect
</UL>

<P><STRONG><a name="[97]"></a>W5500_Initialization</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ethernet.o(i.W5500_Initialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = W5500_Initialization &rArr; W5500LoadParameters &rArr; SysLinkParaInit &rArr; FramWrite &rArr; FramState &rArr; Fdelay
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500LoadParameters
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectGateway
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENETconnect
</UL>

<P><STRONG><a name="[118]"></a>WelinkMain</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, welink.o(i.WelinkMain))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = WelinkMain &rArr; MsaLogin &rArr; RecvDataHandle &rArr; DownstreamCmdHandle &rArr; cmd_105_proess &rArr; UpstreamCmdHandle &rArr; HardwareSendData &rArr; WriteSocketDataToBuffer &rArr; ReadSocket_2Byte &rArr; EthernetSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataHandle
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecvDataHandle
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MsaLogin
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENETconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskWelink
</UL>

<P><STRONG><a name="[56]"></a>WriteCAN0</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, can.o(i.WriteCAN0))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WriteCAN0 &rArr; CANSend
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANSend
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BST
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BSM
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BSD
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BRO
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BRM_Msg07
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BRM_Msg06
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BRM_Msg05
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BRM_Msg04
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BRM_Msg03
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BRM_Msg02
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BRM_Msg01
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BRM
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BHM
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BEM
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BCS_Data_02
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BCS_Data_01
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BCS
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BCP_DATA_02
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BCP_DATA_01
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BCP
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_BCL
</UL>

<P><STRONG><a name="[a4]"></a>WriteSocketDataToBuffer</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, ethernet.o(i.WriteSocketDataToBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WriteSocketDataToBuffer &rArr; ReadSocket_2Byte &rArr; EthernetSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSocket_2Byte
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSocket_1Byte
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSocket_2Byte
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ndelay
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetSendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSendData
</UL>

<P><STRONG><a name="[7a]"></a>WriteSocket_1Byte</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ethernet.o(i.WriteSocket_1Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WriteSocket_1Byte &rArr; EthernetSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ndelay
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetSendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSocketDataToBuffer
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500SocketRXD
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socketn_Config
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketConnect
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_IR
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSocketDataToBuffer
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectGateway
</UL>

<P><STRONG><a name="[f5]"></a>WriteSocket_2Byte</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, ethernet.o(i.WriteSocket_2Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WriteSocket_2Byte &rArr; EthernetSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ndelay
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetSendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteSocketDataToBuffer
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socketn_Config
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadSocketDataToBuffer
</UL>

<P><STRONG><a name="[79]"></a>WriteSocket_4Byte</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, ethernet.o(i.WriteSocket_4Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WriteSocket_4Byte &rArr; EthernetSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ndelay
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetSendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Socketn_Config
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectGateway
</UL>

<P><STRONG><a name="[116]"></a>Write_W5500</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, ethernet.o(i.Write_W5500))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Write_W5500 &rArr; EthernetSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ndelay
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetSendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W5500Init
</UL>

<P><STRONG><a name="[13b]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[13c]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[13d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[108]"></a>cmd_02_upload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, link .o(i.cmd_02_upload))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpstreamCmdHandle
</UL>

<P><STRONG><a name="[109]"></a>cmd_04_upload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, link .o(i.cmd_04_upload))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpstreamCmdHandle
</UL>

<P><STRONG><a name="[10a]"></a>cmd_06_upload</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, link .o(i.cmd_06_upload))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cmd_06_upload
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpstreamCmdHandle
</UL>

<P><STRONG><a name="[10b]"></a>cmd_08_upload</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, link .o(i.cmd_08_upload))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cmd_08_upload
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpstreamCmdHandle
</UL>

<P><STRONG><a name="[8b]"></a>cmd_101_proess</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, link .o(i.cmd_101_proess))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cmd_101_proess
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownstreamCmdHandle
</UL>

<P><STRONG><a name="[10d]"></a>cmd_102_upload</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, link .o(i.cmd_102_upload))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cmd_102_upload
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpstreamCmdHandle
</UL>

<P><STRONG><a name="[8c]"></a>cmd_103_proess</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, link .o(i.cmd_103_proess))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = cmd_103_proess &rArr; UpstreamCmdHandle &rArr; HardwareSendData &rArr; WriteSocketDataToBuffer &rArr; ReadSocket_2Byte &rArr; EthernetSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpstreamCmdHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownstreamCmdHandle
</UL>

<P><STRONG><a name="[10e]"></a>cmd_104_upload</STRONG> (Thumb, 494 bytes, Stack size 8 bytes, link .o(i.cmd_104_upload))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cmd_104_upload
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpstreamCmdHandle
</UL>

<P><STRONG><a name="[8d]"></a>cmd_105_proess</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, link .o(i.cmd_105_proess))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = cmd_105_proess &rArr; UpstreamCmdHandle &rArr; HardwareSendData &rArr; WriteSocketDataToBuffer &rArr; ReadSocket_2Byte &rArr; EthernetSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpstreamCmdHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownstreamCmdHandle
</UL>

<P><STRONG><a name="[10f]"></a>cmd_106_upload</STRONG> (Thumb, 524 bytes, Stack size 24 bytes, link .o(i.cmd_106_upload))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cmd_106_upload
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HEX_To_BCD
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpstreamCmdHandle
</UL>

<P><STRONG><a name="[8e]"></a>cmd_107_proess</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, link .o(i.cmd_107_proess))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownstreamCmdHandle
</UL>

<P><STRONG><a name="[110]"></a>cmd_108_upload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, link .o(i.cmd_108_upload))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpstreamCmdHandle
</UL>

<P><STRONG><a name="[8f]"></a>cmd_109_proess</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, link .o(i.cmd_109_proess))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownstreamCmdHandle
</UL>

<P><STRONG><a name="[10c]"></a>cmd_10_upload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, link .o(i.cmd_10_upload))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpstreamCmdHandle
</UL>

<P><STRONG><a name="[111]"></a>cmd_110_upload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, link .o(i.cmd_110_upload))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpstreamCmdHandle
</UL>

<P><STRONG><a name="[86]"></a>cmd_1_proess</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, link .o(i.cmd_1_proess))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownstreamCmdHandle
</UL>

<P><STRONG><a name="[90]"></a>cmd_201_proess</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, link .o(i.cmd_201_proess))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownstreamCmdHandle
</UL>

<P><STRONG><a name="[112]"></a>cmd_202_upload</STRONG> (Thumb, 418 bytes, Stack size 8 bytes, link .o(i.cmd_202_upload))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cmd_202_upload
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpstreamCmdHandle
</UL>

<P><STRONG><a name="[91]"></a>cmd_203_proess</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, link .o(i.cmd_203_proess))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownstreamCmdHandle
</UL>

<P><STRONG><a name="[113]"></a>cmd_204_upload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, link .o(i.cmd_204_upload))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpstreamCmdHandle
</UL>

<P><STRONG><a name="[92]"></a>cmd_205_proess</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, link .o(i.cmd_205_proess))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownstreamCmdHandle
</UL>

<P><STRONG><a name="[114]"></a>cmd_206_upload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, link .o(i.cmd_206_upload))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpstreamCmdHandle
</UL>

<P><STRONG><a name="[87]"></a>cmd_3_proess</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, link .o(i.cmd_3_proess))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = cmd_3_proess &rArr; UpstreamCmdHandle &rArr; HardwareSendData &rArr; WriteSocketDataToBuffer &rArr; ReadSocket_2Byte &rArr; EthernetSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpstreamCmdHandle
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_3_setup_2_proess
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_3_query_2_proess
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownstreamCmdHandle
</UL>

<P><STRONG><a name="[11c]"></a>cmd_3_query_2_proess</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, link .o(i.cmd_3_query_2_proess))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_3_proess
</UL>

<P><STRONG><a name="[11d]"></a>cmd_3_setup_2_proess</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, link .o(i.cmd_3_setup_2_proess))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_3_proess
</UL>

<P><STRONG><a name="[88]"></a>cmd_5_proess</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, link .o(i.cmd_5_proess))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownstreamCmdHandle
</UL>

<P><STRONG><a name="[89]"></a>cmd_7_proess</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, link .o(i.cmd_7_proess))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownstreamCmdHandle
</UL>

<P><STRONG><a name="[8a]"></a>cmd_9_proess</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, link .o(i.cmd_9_proess))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownstreamCmdHandle
</UL>

<P><STRONG><a name="[94]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwin_ChangeVariableValue_FrameN
</UL>

<P><STRONG><a name="[33]"></a>main</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = main &rArr; OSInit &rArr; OSTmr_Init &rArr; OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP2_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP0_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCInit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOInit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExRTCSet
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemParameterInit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[93]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwin_ChangeVariableValue_FrameN
</UL>

<P><STRONG><a name="[9]"></a>tickISRHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, os_cpu_c.o(i.tickISRHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = tickISRHandler &rArr; OSTimeTick &rArr; OSTimeTickHook &rArr; OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemoveMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EXIT_CRITICAL
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ENTER_CRITICAL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[124]"></a>tick_init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, os_cpu_c.o(i.tick_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tick_init
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetCLK
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;taskStart
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ba]"></a>OS_InitEventList</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, os_core.o(i.OS_InitEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_InitEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[b7]"></a>OS_InitMisc</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_core.o(i.OS_InitMisc))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[b8]"></a>OS_InitRdyList</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, os_core.o(i.OS_InitRdyList))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[b9]"></a>OS_InitTCBList</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, os_core.o(i.OS_InitTCBList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_InitTCBList
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[be]"></a>OS_InitTaskIdle</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, os_core.o(i.OS_InitTaskIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[bf]"></a>OS_InitTaskStat</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, os_core.o(i.OS_InitTaskStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskStat &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[c4]"></a>OS_SchedNew</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_core.o(i.OS_SchedNew))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[df]"></a>OSTmr_InitTask</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, os_tmr.o(i.OSTmr_InitTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OSTmr_InitTask &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[e1]"></a>OSTmr_Link</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, os_tmr.o(i.OSTmr_Link))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSTmr_Link
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[37]"></a>OSTmr_Task</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, os_tmr.o(i.OSTmr_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTmr_Task &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Link
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_tmr.o(i.OSTmr_InitTask)
</UL>
<P><STRONG><a name="[e0]"></a>OSTmr_Unlink</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, os_tmr.o(i.OSTmr_Unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OSTmr_Unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[fc]"></a>SystemParameterInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main.o(i.SystemParameterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SystemParameterInit &rArr; FramRead &rArr; Fdelay
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramRead
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d]"></a>taskBMS</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, main.o(i.taskBMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = taskBMS &rArr; BMSMain &rArr; Charger_RECData_Pro &rArr; CST_Analyse &rArr; BMS_BSD &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSMain
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.taskStart)
</UL>
<P><STRONG><a name="[3b]"></a>taskDisplay</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(i.taskDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = taskDisplay &rArr; DisplayMain &rArr; DisplayVariableValue &rArr; DisplayText &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMain
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.taskStart)
</UL>
<P><STRONG><a name="[3c]"></a>taskMeter</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(i.taskMeter))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = taskMeter &rArr; MeterMain &rArr; Print &rArr; PrintFLT &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterMain
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.taskStart)
</UL>
<P><STRONG><a name="[3a]"></a>taskStart</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, main.o(i.taskStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = taskStart &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStatInit
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[3e]"></a>taskWelink</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(i.taskWelink))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = taskWelink &rArr; WelinkMain &rArr; MsaLogin &rArr; RecvDataHandle &rArr; DownstreamCmdHandle &rArr; cmd_105_proess &rArr; UpstreamCmdHandle &rArr; HardwareSendData &rArr; WriteSocketDataToBuffer &rArr; ReadSocket_2Byte &rArr; EthernetSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WelinkMain
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.taskStart)
</UL>
<P><STRONG><a name="[55]"></a>BMS_BCL</STRONG> (Thumb, 250 bytes, Stack size 8 bytes, bms.o(i.BMS_BCL))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BMS_BCL &rArr; WriteCAN0 &rArr; CANSend
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCAN0
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSMain
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRO_Analyse
</UL>

<P><STRONG><a name="[57]"></a>BMS_BCP</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, bms.o(i.BMS_BCP))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BMS_BCP &rArr; WriteCAN0 &rArr; CANSend
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCAN0
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRM_Analyse
</UL>

<P><STRONG><a name="[58]"></a>BMS_BCP_DATA_01</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, bms.o(i.BMS_BCP_DATA_01))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = BMS_BCP_DATA_01 &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCAN0
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_DATA_Packet_Analyse
</UL>

<P><STRONG><a name="[5a]"></a>BMS_BCP_DATA_02</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, bms.o(i.BMS_BCP_DATA_02))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BMS_BCP_DATA_02 &rArr; WriteCAN0 &rArr; CANSend
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCAN0
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_DATA_Packet_Analyse
</UL>

<P><STRONG><a name="[53]"></a>BMS_BCS</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, bms.o(i.BMS_BCS))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BMS_BCS &rArr; WriteCAN0 &rArr; CANSend
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCAN0
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSMain
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRO_Analyse
</UL>

<P><STRONG><a name="[5b]"></a>BMS_BCS_Data_01</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, bms.o(i.BMS_BCS_Data_01))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = BMS_BCS_Data_01 &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCAN0
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_DATA_Packet_Analyse
</UL>

<P><STRONG><a name="[5c]"></a>BMS_BCS_Data_02</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, bms.o(i.BMS_BCS_Data_02))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BMS_BCS_Data_02 &rArr; WriteCAN0 &rArr; CANSend
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCAN0
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_DATA_Packet_Analyse
</UL>

<P><STRONG><a name="[5d]"></a>BMS_BEM</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bms.o(i.BMS_BEM))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = BMS_BEM &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCAN0
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSD_Analyse
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CEM_Analyse
</UL>

<P><STRONG><a name="[5e]"></a>BMS_BHM</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bms.o(i.BMS_BHM))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BMS_BHM &rArr; WriteCAN0 &rArr; CANSend
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCAN0
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHM_Analyse
</UL>

<P><STRONG><a name="[5f]"></a>BMS_BRM</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, bms.o(i.BMS_BRM))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BMS_BRM &rArr; WriteCAN0 &rArr; CANSend
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCAN0
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRM_Analyse
</UL>

<P><STRONG><a name="[60]"></a>BMS_BRM_Msg01</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, bms.o(i.BMS_BRM_Msg01))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = BMS_BRM_Msg01 &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCAN0
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_DATA_Packet_Analyse
</UL>

<P><STRONG><a name="[61]"></a>BMS_BRM_Msg02</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, bms.o(i.BMS_BRM_Msg02))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = BMS_BRM_Msg02 &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCAN0
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_DATA_Packet_Analyse
</UL>

<P><STRONG><a name="[62]"></a>BMS_BRM_Msg03</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, bms.o(i.BMS_BRM_Msg03))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = BMS_BRM_Msg03 &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCAN0
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_DATA_Packet_Analyse
</UL>

<P><STRONG><a name="[64]"></a>BMS_BRM_Msg04</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, bms.o(i.BMS_BRM_Msg04))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = BMS_BRM_Msg04 &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCAN0
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_DATA_Packet_Analyse
</UL>

<P><STRONG><a name="[65]"></a>BMS_BRM_Msg05</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, bms.o(i.BMS_BRM_Msg05))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = BMS_BRM_Msg05 &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCAN0
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_DATA_Packet_Analyse
</UL>

<P><STRONG><a name="[66]"></a>BMS_BRM_Msg06</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, bms.o(i.BMS_BRM_Msg06))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = BMS_BRM_Msg06 &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCAN0
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_DATA_Packet_Analyse
</UL>

<P><STRONG><a name="[67]"></a>BMS_BRM_Msg07</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bms.o(i.BMS_BRM_Msg07))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BMS_BRM_Msg07 &rArr; WriteCAN0 &rArr; CANSend
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCAN0
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_DATA_Packet_Analyse
</UL>

<P><STRONG><a name="[68]"></a>BMS_BRO</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bms.o(i.BMS_BRO))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = BMS_BRO &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCAN0
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRO_Analyse
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CML_Analyse
</UL>

<P><STRONG><a name="[69]"></a>BMS_BSD</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, bms.o(i.BMS_BSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = BMS_BSD &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCAN0
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_Analyse
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSD_Analyse
</UL>

<P><STRONG><a name="[54]"></a>BMS_BSM</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, bms.o(i.BMS_BSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BMS_BSM &rArr; WriteCAN0 &rArr; CANSend
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCAN0
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSMain
</UL>

<P><STRONG><a name="[52]"></a>BMS_BST</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bms.o(i.BMS_BST))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BMS_BST &rArr; WriteCAN0 &rArr; CANSend
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCAN0
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSMain
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_Analyse
</UL>

<P><STRONG><a name="[51]"></a>Charger_RECData_Pro</STRONG> (Thumb, 242 bytes, Stack size 8 bytes, bms.o(i.Charger_RECData_Pro))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = Charger_RECData_Pro &rArr; CST_Analyse &rArr; BMS_BSD &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CTS_Analyse
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CST_Analyse
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSD_Analyse
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRO_Analyse
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRM_Analyse
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CML_Analyse
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHM_Analyse
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CEM_Analyse
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCS_Analyse
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMS_DATA_Packet_Analyse
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMSMain
</UL>

<P><STRONG><a name="[7f]"></a>DisplayText</STRONG> (Thumb, 98 bytes, Stack size 72 bytes, display.o(i.DisplayText))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = DisplayText &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1SendStr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayVariableValue
</UL>

<P><STRONG><a name="[7e]"></a>DisplayVariableValue</STRONG> (Thumb, 646 bytes, Stack size 48 bytes, display.o(i.DisplayVariableValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = DisplayVariableValue &rArr; DisplayText &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToAscStr
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwin_ChangeVariableValue_FrameN
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dwin_ChangeVariableValue_Frame1
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayText
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMain
</UL>

<P><STRONG><a name="[82]"></a>Dwin_ChangeVariableValue_Frame1</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, display.o(i.Dwin_ChangeVariableValue_Frame1))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = Dwin_ChangeVariableValue_Frame1 &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1SendStr
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayVariableValue
</UL>

<P><STRONG><a name="[84]"></a>Dwin_ChangeVariableValue_FrameN</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, display.o(i.Dwin_ChangeVariableValue_FrameN))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = Dwin_ChangeVariableValue_FrameN &rArr; OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1SendStr
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayVariableValue
</UL>

<P><STRONG><a name="[7d]"></a>ReadDataProcess</STRONG> (Thumb, 1110 bytes, Stack size 8 bytes, display.o(i.ReadDataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = ReadDataProcess &rArr; FramWrite &rArr; FramState &rArr; Fdelay
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1RxbufClear
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AscToHexStr
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASCII_To_HEX
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FramWrite
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayMain
</UL>

<P><STRONG><a name="[ab]"></a>FrameCheck_645_2007</STRONG> (Thumb, 484 bytes, Stack size 28 bytes, meter.o(i.FrameCheck_645_2007))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FrameCheck_645_2007
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterMain
</UL>

<P><STRONG><a name="[a9]"></a>FramePack_645_2007</STRONG> (Thumb, 174 bytes, Stack size 28 bytes, meter.o(i.FramePack_645_2007))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FramePack_645_2007
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterMain
</UL>

<P><STRONG><a name="[fe]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4Init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART3Init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0Init
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
